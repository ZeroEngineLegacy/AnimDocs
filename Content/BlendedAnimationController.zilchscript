enum BoxManAnimState { Idle, Walk, Run, PreJump, JumpStart, JumpEnd, PostJump }

class BlendedAnimationController : ZilchComponent
{
  [Dependency] var AnimationGraph : AnimationGraph;
  
  [Property]
  var IdleAnimation : Animation;
  
  [Property]
  var RunAnimation : Animation;
  
  [Property]
  var JumpStartAnimation : Animation;
  
  [Property]
  var JumpAirAnimation : Animation;
  
  [Property]
  var JumpEndAnimation : Animation;
  
  var Root : Cog;
  
  [Property]
  var IdleBlendDur : Real = 0.5;
  
  [Property]
  var RunBlendDur : Real = 0.5;
  
  [Property]
  var PreJumpBlendDur : Real = 0.5;
  
  [Property]
  var PreJumpDur : Real = 0.3;
  
  [Property]
  var JumpStartBlendDur : Real = 0.5;
  
  [Property]
  var JumpStartDur : Real = 0.5;
  
  [Property]
  var JumpEndBlendDur : Real = 1;
  
  [Property]
  var PostJumpBlendDur : Real = 1;
  
  var AnimState : BoxManAnimState;
  
  function Initialize(init : CogInitializer)
  {
    this.Root = this.Owner.Parent;
    this.AnimationGraph.ActiveNode = this.AnimationGraph.CreateBasicNode(this.IdleAnimation, AnimationPlayMode.Loop);
    this.AnimState = BoxManAnimState.Idle;
    
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.JumpEvent, this.OnJumpEvent);
    Zero.Connect(this.Owner, Events.MovementEvent, this.OnMovementEvent);
    Zero.Connect(this.Owner, Events.AnimationEnded, this.OnAnimationEnded);
    Zero.Connect(this.Owner, Events.AnimationBlendEnded, this.OnAnimationBlendEnded);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    //if(this.Root.SweptController.Grounded && this.AnimState == BoxManAnimState.JumpEnd)
    //{
    //  this.CrossTo(this.JumpEndAnimation, AnimationPlayMode.PlayOnce, this.PostJumpBlendDur);
    //  this.AnimState = BoxManAnimState.PostJump;
    //}
  }

  function OnAnimationBlendEnded(event : AnimationGraphEvent)
  {
    var node = event.Node as CrossBlend;
    Console.WriteLine("AnimationBlendEnded Node: `event.Node` `this.Space.TimeSpace.RealTimePassed`");
   // Console.WriteLine("AnimationBlendEnded From: `node.From` `this.Space.TimeSpace.RealTimePassed`");
    //Console.WriteLine("AnimationBlendEnded To: `node.To` `this.Space.TimeSpace.RealTimePassed`");
  }

  function OnAnimationEnded(event : AnimationGraphEvent)
  {
    Console.WriteLine("AnimantionEnded Node: `event.Node` `this.Space.TimeSpace.RealTimePassed`");
    Console.WriteLine("AnimantionEnded Animation: `event.Animation.Name` `this.Space.TimeSpace.RealTimePassed`");
    
    if(event.Animation == this.JumpStartAnimation)
    {
      this.Root.SweptController.Jump();
      this.CrossTo(this.JumpAirAnimation, AnimationPlayMode.PlayOnce, this.JumpStartBlendDur, this.JumpStartDur);
      this.AnimState = BoxManAnimState.JumpStart;
    }
    else if(event.Animation == this.JumpAirAnimation)
    {
      this.CrossTo(this.JumpEndAnimation, AnimationPlayMode.PlayOnce, this.JumpEndBlendDur);
      this.AnimState = BoxManAnimState.JumpEnd;
    }
  }

  function OnJumpEvent(event : JumpEvent)
  {
    Console.WriteLine("Jump Begin:");
    this.CrossTo(this.JumpStartAnimation, AnimationPlayMode.PlayOnce, this.PreJumpBlendDur, this.PreJumpDur);
    this.AnimState = BoxManAnimState.PreJump;
  }
  
  function OnMovementEvent(event : MovementEvent)
  {
    if(this.Root.SweptController.Grounded && Math.Length(event.MoveDir) > 0.0 && this.AnimState != BoxManAnimState.Run && this.AnimState != BoxManAnimState.PreJump)
    {
      if(this.AnimState == BoxManAnimState.JumpStart)
      {
        Console.WriteLine("InMovementResponse: we are on ground");
        this.Space.TimeSpace.Paused= true;
      }
      this.CrossTo(this.RunAnimation, AnimationPlayMode.Loop, this.RunBlendDur);
      this.AnimState = BoxManAnimState.Run;
    }
    else if(this.Root.SweptController.Grounded && Math.Length(event.MoveDir) == 0.0 && this.AnimState != BoxManAnimState.Idle && this.AnimState != BoxManAnimState.PreJump)
    {
        Console.WriteLine("InMovementResponse: we are on ground");
        //this.Space.TimeSpace.Paused= true;
      this.CrossTo(this.IdleAnimation, AnimationPlayMode.Loop, this.IdleBlendDur);
      this.AnimState = BoxManAnimState.Idle;
    }
  }
  
  function CrossTo(anim : Animation, playMode : AnimationPlayMode) : CrossBlend
  {
    Console.WriteLine("CrossTo:");
    var activeNode = this.AnimationGraph.ActiveNode;
    var targetNode = this.AnimationGraph.CreateBasicNode(anim, playMode);
    targetNode.Duration = anim.Duration;
    Console.WriteLine("  activeNode: `activeNode` `this.Space.TimeSpace.RealTimePassed`");
    Console.WriteLine("  targetNode: `targetNode` `anim.Name` `this.Space.TimeSpace.RealTimePassed`");
    
    var cross = this.AnimationGraph.CreateCrossBlendNode();
    cross.From = activeNode;
    cross.To = targetNode;
    cross.Duration = anim.Duration;
    Console.WriteLine("  crossNode: `cross` `this.Space.TimeSpace.RealTimePassed`");
    
    this.AnimationGraph.ActiveNode = cross;
    return cross;
  }
  
  function CrossTo(anim : Animation, playMode : AnimationPlayMode, duration : Real) : CrossBlend
  {
    var cross = this.CrossTo(anim, playMode);
    cross.Duration = duration;    
    return cross;
  }
  
  function CrossTo(anim : Animation, playMode : AnimationPlayMode, duration : Real, targetDur : Real) : CrossBlend
  {
    var cross = this.CrossTo(anim, playMode);
    cross.Duration = duration;
    cross.To.Duration = targetDur;
    return cross;
  }
  
  function TimeRemaining(node : AnimationNode) : Real
  {
    return node.Duration * (1.0 - node.GetNormalizedTime());
  }
}
